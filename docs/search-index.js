var searchIndex = JSON.parse('{\
"egglog":{"doc":"egglog","t":"NGNNNDENEDRNNNNNDNNNDNIEDDNDGNEDGNNDRDNNLLLLOLLKLMMAMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLLLLLLLLLLKLMLLLLMMLLLLLLLLLLLLLLLLLLLLLMOMMMKLMMMLLLLLMMMLLLLLLMMMLMMMMLLLLAMLMLMLMLLLLLLLLLLLLLLLOLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOMALLLLLLLLLLLLLLLMMMMMGNNGNNNNNNNNNNNENNNNNNNNNNGNNDNNNNNNNGNNNNNGNNDNNNNNNNNGEDEEEDEDDDEDDNNNNNNNNNNNEGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNDNNGNNNNGNNNNNNGDNNNNNNNNNNNNNNNGNDINNNNNNNNNDLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLMMALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMLLLLLLLLLLLLLLLLLLLLLMLMLLLLLMMMMMMMMLLLLMLALLLLLLMMMLMMLMMLLLLMLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMDLLLLLLLLLLLLLLLLLLDDDDILLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLDNNNEENNNENNDDINNLLLLLLLLLLLLLLLMLLLLLLLLLLKLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMDDDIDDIDDGDDIQQDDDLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLKLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGG","n":["App","ArcSort","Best","CheckError","CombinedRulesetError","EGraph","Error","ExpectFail","ExtractReport","Function","HIGH_COST","IoError","Lit","MergeError","NoSuchRuleset","Normal","NotFoundError","NotFoundError","ParseError","Pop","Primitive","PrimitiveError","PrimitiveLike","RunMode","RunReport","SerializeConfig","ShowDesugaredEgglog","SimplePrimitive","Subst","SubsumeMergeError","Term","TermDag","TermId","TypeError","TypeErrors","TypeInfo","UNIT_SYM","Value","Var","Variants","add_arcsort","add_arcsort","add_primitive","add_primitive","add_primitives","add_sort","app","apply","apply","apply_time_per_rule","apply_time_per_ruleset","ast","bits","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","compare","constraint","declare_sort","default","default","default","default","default","deref","enable_terms_encoding","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","eval_expr","eval_lit","expr_to_term","extract","extract_value","extract_value_to_string","extract_variants","fact_directory","fake","find","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_id","from_str","func_types","function_to_dag","functions","get","get","get_extract_report","get_hash","get_hash","get_hash","get_hash","get_overall_run_report","get_run_report","get_sort","get_sort_by","get_sort_by","get_sort_nofail","get_type_constraints","get_type_constraints","global_types","hash","hash","hash","hash","hashcons","include_temporary_functions","insert","insert_internal","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_extractable","is_interactive_mode","lit","lookup","lookup_global","match_limit","match_term_app","max_calls_per_function","max_functions","merge","name","name","node_limit","nodes","num_matches_per_rule","num_tuples","parse_and_run_program","parse_program","partial_cmp","pop","presort_names","presorts","primitives","print_function","print_size","push","rebuild","rebuild","rebuild_nofail","rebuild_time_per_ruleset","root_eclasses","run_mode","run_program","schema","search_time_per_rule","search_time_per_ruleset","seminaive","serialize","serialize_for_graphviz","set_reserved_symbol","size","sort","sorts","source","split_primitive_outputs","subsume","tag","term_to_expr","test_proofs","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_tt","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","union","unit","unpack","updated","util","var","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","cost","term","termdag","termdag","terms","Action","Action","Action","Actions","AddRuleset","AddRuleset","AddRuleset","AddRuleset","BiRewrite","BiRewrite","Bool","Calc","Calc","Call","Call","Change","Change","Change","Check","Check","Check","Check","CheckProof","CheckProof","CheckProof","CheckProof","Command","CoreAction","CoreAction","CorrespondingVar","Datatype","Datatype","Declare","Declare","Delete","Eq","Eq","Expr","Expr","Expr","Extract","Extract","F64","Fact","Fact","Fact","Facts","Fail","Fail","Fail","Fail","Function","Function","Function","Function","FunctionDecl","GenericAction","GenericActions","GenericCommand","GenericExpr","GenericFact","GenericFunctionDecl","GenericNCommand","GenericRewrite","GenericRule","GenericRunConfig","GenericSchedule","Id","IdentSort","Include","Include","Input","Input","Input","Input","Int","Let","Let","Lit","Lit","Literal","NCommand","NormRule","NormRule","Output","Output","Output","Output","Panic","Panic","Pop","Pop","Pop","Pop","PrintFunction","PrintFunction","PrintOverallStatistics","PrintOverallStatistics","PrintOverallStatistics","PrintOverallStatistics","PrintSize","PrintSize","PrintSize","PrintSize","PrintTable","PrintTable","Push","Push","Push","Push","QueryExtract","QueryExtract","Relation","Relation","Repeat","Repeat","ResolvedVar","Rewrite","Rewrite","Rule","Rule","Rule","Run","Run","RunConfig","RunSchedule","RunSchedule","RunSchedule","RunSchedule","Saturate","Saturate","Schedule","Schema","Sequence","Sequence","Set","Set","SetOption","SetOption","SetOption","SetOption","Simplify","Simplify","Sort","Sort","Sort","Sort","String","Subsume","Subsume","Symbol","ToSexp","Union","Union","Unit","UnstableCombinedRuleset","UnstableCombinedRuleset","UnstableCombinedRuleset","UnstableCombinedRuleset","Var","Var","Variant","ann","as_str","ast_size","body","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","call","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","compare","compare","compare","compare","conditions","cost","cost","cost","default","default","default","desugar","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_var","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","head","head","head","ident","ignore_viz","ignore_viz","input","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_global_ref","is_var","lhs","lit","lit","load","map_def_use","map_exprs","merge","merge","merge_action","merge_action","name","name","name","name","new","new","new","new","output","output_type","parse","partial_cmp","partial_cmp","partial_cmp","partial_cmp","relation","relation","rhs","ruleset","ruleset","saturate","schema","schema","singleton","sort","sort","store","subst","subst","subst_leaf","to","to_command","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_sexp","to_sexp","to_sexp","to_sexp","to_sexp","to_sexp","to_sexp","to_sexp","to_sexp","to_sexp","to_sexp","to_sexp","to_sexp","to_sexp","to_sexp","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","types","unextractable","unextractable","until","until","vars","visit_exprs","visit_exprs","visit_exprs","visit_exprs","visit_exprs","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","walk","constructor","expr","expr","exprs","file","file","inputs","name","name","name","name","name","rule","ruleset","schedule","sort","value","variants","variants","constructor","expr","expr","exprs","file","file","inputs","name","name","name","name","name","rule","ruleset","schedule","sort","value","variants","variants","exprs","file","file","name","name","name","rule","ruleset","value","exprs","file","file","name","name","name","rule","ruleset","value","Desugar","borrow","borrow_mut","clone","clone_into","declare","default","desugar_function","from","get_fresh","into","lookup_parent_name","parent_name","parse_program","to_owned","try_from","try_into","type_id","vzip","ActionParser","ExprParser","FactParser","ProgramParser","__ToTriple","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","default","default","default","from","from","from","from","into","into","into","into","new","new","new","new","parse","parse","parse","parse","to_triple","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","AllEqualTypeConstraint","And","ArityMismatch","Assign","Constraint","ConstraintError","Eq","Impossible","ImpossibleCaseIdentified","ImpossibleConstraint","InconsistentConstraint","NoConstraintSatisfied","Problem","SimpleTypeConstraint","TypeConstraint","UnconstrainedVar","Xor","add_actions","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","constraints","default","fmt","fmt","fmt","from","from","from","from","from","from","get","get","get","into","into","into","into","into","into","into_box","into_box","new","new","range","to_owned","to_type_error","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","with_all_arguments_sort","with_exact_length","with_output_sort","actual","atom","expected","BoolSort","EqSort","F64Sort","FromSort","FunctionSort","I64Sort","IntoSort","MapSort","NotEqualPrimitive","PreSort","RationalSort","SetSort","Sort","Sort","Sort","StringSort","UnitSort","VecSort","apply","as_arc_any","as_arc_any","as_arc_any","as_arc_any","as_arc_any","as_arc_any","as_arc_any","as_arc_any","as_arc_any","as_arc_any","as_arc_any","as_arc_any","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","canonicalize","canonicalize","canonicalize","canonicalize","canonicalize","canonicalize","element","element","element_name","element_name","extract_expr","extract_expr","extract_expr","extract_expr","extract_expr","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","foreach_tracked_values","from","from","from","from","from","from","from","from","from","from","from","from","get_type_constraints","inner_values","inner_values","inner_values","inner_values","inner_values","into","into","into","into","into","into","into","into","into","into","into","into","is_container_sort","is_container_sort","is_container_sort","is_container_sort","is_container_sort","is_eq_container_sort","is_eq_container_sort","is_eq_container_sort","is_eq_container_sort","is_eq_container_sort","is_eq_sort","is_eq_sort","load","make_expr","make_expr","make_expr","make_expr","make_expr","make_expr","make_expr","make_expr","make_expr","make_expr","make_expr","make_expr","make_sort","make_sort","make_sort","make_sort","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","new","new","new","new","new","new","presort_names","presort_names","presort_names","presort_names","register_primitives","register_primitives","register_primitives","register_primitives","register_primitives","register_primitives","register_primitives","register_primitives","register_primitives","register_primitives","register_primitives","serialized_name","serialized_name","store","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","IndexMap","IndexSet"],"q":[[0,"egglog"],[350,"egglog::ExtractReport"],[355,"egglog::ast"],[1014,"egglog::ast::Command"],[1033,"egglog::ast::GenericCommand"],[1052,"egglog::ast::GenericNCommand"],[1061,"egglog::ast::NCommand"],[1070,"egglog::ast::desugar"],[1089,"egglog::ast::parse"],[1139,"egglog::constraint"],[1225,"egglog::constraint::ImpossibleConstraint"],[1228,"egglog::sort"],[1456,"egglog::util"],[1458,"core::result"],[1459,"core::convert"],[1460,"alloc::vec"],[1461,"core::option"],[1462,"core::cmp"],[1463,"alloc::string"],[1464,"core::fmt"],[1465,"core::fmt"],[1466,"lalrpop_util"],[1467,"core::hash"],[1468,"core::marker"],[1469,"core::hash"],[1470,"core::marker"],[1471,"alloc::boxed"],[1472,"core::hash"],[1473,"egraph_serialize"],[1474,"core::error"],[1475,"core::any"],[1476,"core::clone"],[1477,"core::fmt"],[1478,"core::cmp"],[1479,"core::cmp"],[1480,"core::convert"],[1481,"core::iter::traits::iterator"],[1482,"lalrpop_util::lexer"],[1483,"core::any"]],"d":["","","","","","","","","A report of the results of an extract action.","","","","","","","","","","","","","","","","Running a schedule produces a report of the results. This …","","","","","","Like <code>Expr</code>s but with sharing and deduplication.","A hashconsing arena for <code>Term</code>s.","","","","Stores resolved typechecking information. TODO make these …","","","","","","Add a user-defined sort","","Add a user-defined primitive","","","Make and return a <code>Term::App</code> with the given head symbol and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Use the rust backend implimentation of eqsat, including a …","","","","","","","","","","","","","","","","","","","","","","","Recursively converts the given expression to a term.","This example uses <code>EGraph::extract</code> to extract a term. The …","Extract a value to a <code>TermDag</code> and <code>Term</code> in the <code>TermDag</code>. See …","Extract a value to a string for printing. See also …","","","","find the leader value for a particular eclass","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Convert the given id to the corresponding term.","Gets the last extract report and returns it, if the last …","","","","","Gets the overall run report and returns it.","Gets the last run report and returns it, if the last …","Returns a sort based on the type","","Returns the first sort that satisfies the type and …","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Make and return a <code>Term::Lit</code> with the given literal, and …","Convert the given term to its id.","","","","","","","","","","","","","","","","Pop the current egraph off the stack, replacing it with …","","","","","","","","","","","","","Run a program, represented as an AST. Return a list of …","","The time it took to run the query, for each rule.","","","Serialize the egraph into a format that can be read by the …","Serializes the egraph for export to graphviz.","","Returns the number of nodes in this DAG.","","","","","Mark the given inputs as subsumed.","","Recursively converts the given term to an expression.","","","","","","","","","","","","Converts the given term to a string.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","If any changes were made to the database, this is true.","","Make and return a <code>Term::Var</code> with the given symbol, and …","","","","","","","","","","","","","","","","","","","","","Perform an <code>Action</code> on the global database (see …","Perform an <code>Action</code> on the global database (see …","","","Using the <code>ruleset</code> command, defines a new ruleset that can …","","Using the <code>ruleset</code> command, defines a new ruleset that can …","Similar to <code>Command::Rewrite</code>, but generates two rules, one …","Similar to <code>Command::Rewrite</code>, but generates two rules, one …","","","","","","Change a function entry.","Delete or subsume (mark as hidden from future rewrites …","Delete or subsume (mark as hidden from future rewrites …","","The <code>check</code> command checks that the given facts match at …","","The <code>check</code> command checks that the given facts match at …","","Currently unused, this command will check proofs when they …","","Currently unused, this command will check proofs when they …","","","","","Declare a user-defined datatype. Datatypes can be unioned …","Declare a user-defined datatype. Datatypes can be unioned …","<code>declare</code> is syntactic sugar allowing for the declaration of …","<code>declare</code> is syntactic sugar allowing for the declaration of …","<code>delete</code> this entry from a function. Be wary! Only delete …","Must be at least two things in an eq fact","Must be at least two things in an eq fact","","","","<code>extract</code> a datatype from the egraph, choosing the smallest …","<code>extract</code> a datatype from the egraph, choosing the smallest …","","","","","","","Assert that a command fails with an error.","","Assert that a command fails with an error.","","Declare an egglog function, which is a database table with …","","Declare an egglog function, which is a database table with …","","","","A <code>Command</code> is the top-level construct in egglog. It …","","Facts are the left-hand side of a <code>Command::Rule</code>. They …","Represents the declaration of a function directly parsed …","A <code>NCommand</code> is a desugared <code>Command</code>, where syntactic sugars …","","","","","","","Include another egglog file directly as text and run it.","Include another egglog file directly as text and run it.","","Input a CSV file directly into a function.","","Input a CSV file directly into a function.","","Bind a variable to a particular datatype or primitive. At …","Bind a variable to a particular datatype or primitive. At …","","","","","","","","Extract and output a set of expressions to a file.","","Extract and output a set of expressions to a file.","","","","<code>pop</code> the current egraph, restoring the previous one. The …","","<code>pop</code> the current egraph, restoring the previous one. The …","Print out rows a given function, extracting each of the …","Print out rows a given function, extracting each of the …","","Print runtime statistics about rules and rulesets so far.","","Print runtime statistics about rules and rulesets so far.","","Print out the number of rows in a function or all …","","Print out the number of rows in a function or all …","","","","<code>push</code> the current egraph <code>n</code> times so that it is saved. …","","<code>push</code> the current egraph <code>n</code> times so that it is saved. …","The <code>query-extract</code> command runs a query, extracting the …","The <code>query-extract</code> command runs a query, extracting the …","The <code>relation</code> is syntactic sugar for a named function which …","The <code>relation</code> is syntactic sugar for a named function which …","","","","<code>rewrite</code> is syntactic sugar for a specific form of <code>rule</code> …","<code>rewrite</code> is syntactic sugar for a specific form of <code>rule</code> …","","","","","","","","Runs a <code>Schedule</code>, which specifies rulesets and the number …","","Runs a <code>Schedule</code>, which specifies rulesets and the number …","","","","","","","<code>set</code> a function to a particular result. <code>set</code> should not be …","<code>set</code> a function to a particular result. <code>set</code> should not be …","","Egglog supports several <em>experimental</em> options that can be …","","Egglog supports several <em>experimental</em> options that can be …","","","","Create a new user-defined sort, which can then be used in …","","Create a new user-defined sort, which can then be used in …","","","<code>subsume</code> this entry so that it cannot be queried or …","A interned string in the global symbol table.","","<code>union</code> two datatypes, making them equal in the implicit, …","<code>union</code> two datatypes, making them equal in the implicit, …","","","Using the <code>combined-ruleset</code> command, construct another …","","Using the <code>combined-ruleset</code> command, construct another …","","","","","Convert this symbol into the string in the static, global …eturns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Globals are desugared to functions, with this flag set to …","Globals are desugared to functions, with this flag set to …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Is this a reference to a global variable? After the …","","","","","","","","","","","","","","","","Intern a string into the global symbol table.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts this expression into a s-expression (symbolic …","","","","","","","","","","Converts this rule into an s-expression.","Converts the rewrite into an s-expression.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Applys <code>f</code> to all sub-expressions (including <code>self</code>) …","","","","Applys <code>f</code> to all sub-expressions (including <code>self</code>) …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","This constraint requires all types to be equivalent to …","","","","","","","","","","","","","Construct a set of <code>Assign</code> constraints that fully constrain …","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Requires all arguments to have the given sort. If …","Requires the length of arguments to be <code>exact_length</code>. Note …","Requires the output argument to have the given sort.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","For values like EqSort containers, to make/extract an …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Return the inner values and sorts. Only eq_container_sort …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Extracting an expression (with smallest cost) out of a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return the serialized name of the sort","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[11,0,19,25,25,0,0,25,0,0,0,25,11,25,25,20,0,25,25,25,0,25,0,0,0,0,20,0,0,25,0,0,0,25,25,0,0,0,11,19,1,5,1,5,0,1,9,35,16,18,18,0,13,23,16,17,11,9,1,13,18,19,6,20,5,31,25,23,16,17,11,9,1,13,18,19,6,20,5,31,25,17,5,17,11,9,1,13,18,19,6,20,5,17,11,9,1,13,18,19,6,20,5,13,13,0,1,23,9,1,18,5,6,5,11,9,13,6,20,11,11,11,9,9,9,13,13,13,6,6,6,20,20,20,5,5,9,5,5,5,5,5,13,5,17,11,9,13,18,18,19,6,20,20,31,31,25,25,23,16,17,11,9,1,13,13,13,13,13,18,19,6,6,20,5,31,25,25,25,13,20,1,5,5,17,9,5,11,13,6,20,5,5,5,1,5,1,35,16,1,11,13,6,20,9,23,17,17,23,16,17,11,9,1,13,18,19,6,20,5,31,25,17,5,9,9,1,5,0,23,23,17,35,16,5,9,18,5,5,5,13,5,1,1,1,5,5,5,17,5,5,18,23,5,5,17,18,18,5,5,5,5,9,0,1,25,23,17,13,9,5,17,11,9,1,13,18,19,6,20,5,9,18,20,31,25,0,23,16,17,11,9,1,13,18,19,6,20,5,31,25,23,16,17,11,9,1,13,18,19,6,20,5,31,25,23,16,17,11,9,1,13,18,19,6,20,5,31,25,18,5,13,0,18,0,9,23,16,17,11,9,1,13,18,19,6,20,5,31,25,120,120,120,121,121,0,52,68,0,93,52,64,68,52,68,26,52,68,22,58,0,98,77,93,52,64,68,93,52,64,68,0,93,64,0,52,68,52,68,76,100,74,0,98,77,98,77,26,0,100,74,0,93,52,64,68,93,52,64,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,68,93,52,64,68,26,98,77,22,58,0,0,93,64,93,52,64,68,98,77,93,52,64,68,52,68,93,52,64,68,93,52,64,68,93,64,93,52,64,68,52,68,52,68,122,67,0,52,68,0,52,68,122,67,0,93,52,64,68,122,67,0,0,122,67,98,77,93,52,64,68,52,68,93,52,64,68,26,0,76,0,0,98,77,26,93,52,64,68,22,58,0,58,10,58,123,79,10,124,26,63,58,37,64,67,68,69,70,71,72,73,74,75,76,77,78,79,80,10,124,26,63,58,37,64,67,68,69,70,71,72,73,74,75,76,77,78,79,80,22,58,10,26,63,58,37,64,67,68,69,70,71,72,73,74,75,76,77,78,79,80,10,26,63,58,37,64,67,68,69,70,71,72,73,74,75,76,77,78,79,80,10,26,58,37,10,26,58,37,80,89,71,72,78,89,71,0,10,26,63,58,37,64,67,69,70,71,72,73,74,75,76,77,78,79,10,10,10,26,26,26,63,63,63,58,58,58,37,37,37,64,64,64,67,67,67,69,69,69,70,70,70,71,71,71,72,72,72,73,73,73,74,74,74,75,75,75,76,76,76,77,77,77,78,78,78,79,79,79,10,10,26,26,63,63,58,58,37,37,64,64,67,67,68,68,69,69,70,71,72,73,74,74,75,75,76,77,77,78,79,79,80,80,58,10,10,10,10,10,10,124,26,26,26,26,63,58,37,37,64,67,68,69,70,71,72,73,74,75,76,77,78,79,80,10,10,26,63,58,37,64,67,69,70,71,72,73,74,75,76,77,78,79,58,10,26,63,58,37,64,67,69,70,71,72,73,74,75,76,77,78,79,123,75,79,69,89,71,73,10,124,26,63,58,37,64,67,68,69,70,71,72,73,74,75,76,77,78,79,80,63,58,80,22,58,10,77,77,89,71,89,71,89,63,71,72,10,73,75,78,73,58,0,10,26,58,37,89,71,80,125,70,67,89,71,78,63,69,10,58,77,58,75,64,10,26,63,58,37,64,67,68,69,70,71,72,73,74,75,76,77,78,79,80,84,10,63,58,67,68,69,70,71,72,73,74,77,79,80,10,26,63,58,37,64,67,68,69,74,75,77,79,80,10,124,26,63,58,37,64,67,68,69,70,71,72,73,74,75,76,77,78,79,80,10,124,26,63,58,37,64,67,68,69,70,71,72,73,74,75,76,77,78,79,80,10,124,26,63,58,37,64,67,68,69,70,71,72,73,74,75,76,77,78,79,80,72,89,71,125,70,58,58,64,70,71,77,10,124,26,63,58,37,64,67,68,69,70,71,72,73,74,75,76,77,78,79,80,58,126,127,128,129,130,129,126,131,132,133,134,130,134,134,127,133,131,132,128,126,127,128,129,130,129,126,131,132,133,134,130,134,134,127,133,131,132,128,135,135,136,137,138,136,138,138,137,135,135,136,137,138,136,138,138,137,0,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,0,0,0,0,0,94,95,96,97,94,95,96,97,94,95,96,97,94,95,96,97,94,95,96,97,94,95,96,97,94,95,96,97,139,94,95,96,97,94,95,96,97,94,95,96,97,94,95,96,97,0,103,102,103,0,0,103,103,106,0,106,106,0,0,0,106,103,101,106,104,105,102,103,101,106,104,105,102,103,101,102,102,101,101,102,103,101,106,104,105,102,103,101,48,104,105,106,104,105,102,103,101,104,105,104,105,101,102,106,106,104,105,102,103,101,106,104,105,102,103,101,106,104,105,102,103,101,106,104,105,102,103,101,105,105,105,140,140,140,0,0,0,0,0,0,0,0,0,0,0,0,0,141,142,0,0,0,107,8,109,110,111,112,113,114,115,116,117,118,119,107,109,110,111,112,113,114,115,116,117,118,119,107,109,110,111,112,113,114,115,116,117,118,119,8,115,116,117,118,119,116,117,116,117,8,115,116,117,118,109,110,111,112,113,114,115,116,117,118,119,8,107,109,110,111,112,113,114,115,116,117,118,119,107,8,115,116,117,118,107,109,110,111,112,113,114,115,116,117,118,119,8,115,116,117,118,8,115,116,117,118,8,119,141,8,109,110,111,112,113,114,115,116,117,118,119,115,116,117,118,8,107,109,110,111,112,113,114,115,116,117,118,119,111,119,109,110,111,112,113,114,115,116,117,118,8,109,110,111,112,113,114,115,116,117,118,8,118,142,107,109,110,111,112,113,114,115,116,117,118,119,107,109,110,111,112,113,114,115,116,117,118,119,107,109,110,111,112,113,114,115,116,117,118,119,107,109,110,111,112,113,114,115,116,117,118,119,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2],[[4,[3,0]]]],[[5,2],[[4,[3,0]]]],[[1,-1],3,[[7,[6]]]],[[5,-1],3,[[7,[6]]]],0,[[1,-1],3,8],[[9,10,[12,[11]]],11],[[-1,[14,[13]],[15,[5]]],[[15,[13]]],[]],[[16,[14,[13]],[15,[5]]],[[15,[13]]]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[17,3],[5,3],[17,17],[11,11],[9,9],[1,1],[13,13],[18,18],[19,19],[6,6],[20,20],[5,5],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[13,13],21],[[-1,-2],21,[],[]],0,[[1,-1,[15,[[3,[10,[12,[22]]]]]]],[[4,[3,0]]],[[7,[10]]]],[[],23],[[],9],[[],1],[[],18],[[],5],[6],[5,3],[[11,11],24],[[9,9],24],[[13,13],24],[[6,6],24],[[20,20],24],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[5,22],[[4,[[3,[2,13]],25]]]],[[5,26],13],[[9,22],11],[[5,13,9,2],[[3,[27,11]]]],[[5,13],[[3,[9,11]]]],[[5,13],28],[[5,13,27,9],[[12,[11]]]],0,[[],13],[[5,13],13],[[17,29],30],[[11,29],30],[[9,29],30],[[13,29],30],[[18,29],30],[[18,29],30],[[19,29],30],[[6,29],30],[[20,29],30],[[20,29],30],[[31,29],30],[[31,29],30],[[25,29],30],[[25,29],30],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[10,13],[-1,-1,[]],[[[33,[32]]],13],[24,13],[34,13],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,6,35],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[36,[27,28,28]]],25],[31,25],[[10,37],13],[38,[[4,[20]]]],0,[[5,10,27],[[4,[[3,[[12,[[3,[11,11]]]],9]],25]]]],0,[[17,[14,[13]]],[[15,[13]]]],[[9,39],11],[5,[[15,[19]]]],[[-1,-2],40,[41,42],43],[[-1,-2],40,[41,42],43],[[-1,-2],40,[41,42],43],[[-1,-2],40,[41,42],43],[5,18],[5,[[15,[18]]]],[5,[[15,[[44,[-1]]]]],[8,45,46]],[[1,-1],[[15,[[44,[-2]]]]],47,[8,45,46]],[[5,-1],[[15,[[44,[-2]]]]],47,[8,45,46]],[1,[[44,[-1]]],[8,45,46]],[-1,[[49,[48]]],[]],[16,[[49,[48]]]],0,[[11,-1],3,50],[[13,-1],3,50],[[6,-1],3,50],[[20,-1],3,50],0,0,[[17,[14,[13]],13,51],[[15,[13]]]],[[17,[14,[13]],13,51,24],[[15,[13]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[17,24],[5,24],[[9,26],11],[[9,11],39],[[1,10],[[15,[2]]]],0,0,0,0,0,[-1,10,[]],[16,10],0,0,0,[5,27],[[5,38],[[4,[[12,[28]],25]]]],[[5,38],[[4,[[12,[52]],25]]]],[[13,13],[[15,[21]]]],[5,[[4,[3,25]]]],0,0,0,[[5,10,27],[[4,[3,25]]]],[[5,[15,[10]]],[[4,[3,25]]]],[5,3],0,[5,[[4,[27,25]]]],[5,27],0,0,0,[[5,[12,[52]]],[[4,[[12,[28]],25]]]],0,0,0,0,[[5,23],55],[[5,24],55],[[5,10],3],[9,27],0,0,[25,[[15,[56]]]],0,[[17,[14,[13]]],3],0,[[9,11],22],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[9,11],28],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],0,[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[[18,18],18],[[5,37,37,10],37],[[],13],0,0,0,[[9,10],11],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[58,[-1,-2,-3]]],-3,[59,60],[41,59,60,61],59],[10,38],[[[58,[-1,-2,-3]]],27,[59,60],[41,59,60,61],59],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-2],22,[[7,[10]]],62],[[-1,-2],[[58,[10,10,3]]],[[7,[10]]],62],[10,10],[26,26],[63,63],[[[58,[-1,-2,-3]]],[[58,[-1,-2,-3]]],59,59,59],[37,37],[[[64,[-1,-2,-3]]],[[64,[-1,-2,-3]]],[59,60,59],[59,65,61,60,41,59],[59,66,59]],[[[67,[-1,-2,-3]]],[[67,[-1,-2,-3]]],59,59,59],[[[68,[-1,-2]]],[[68,[-1,-2]]],[59,60,59],[59,65,61,60,41,59]],[69,69],[[[70,[-1,-2,-3]]],[[70,[-1,-2,-3]]],59,59,59],[[[71,[-1,-2,-3]]],[[71,[-1,-2,-3]]],[59,60,59],[59,65,61,60,41,59],[59,66,59]],[72,72],[73,73],[[[74,[-1,-2,-3]]],[[74,[-1,-2,-3]]],59,59,59],[[[75,[-1,-2]]],[[75,[-1,-2]]],[59,60,59],[59,65,61,60,41,59]],[76,76],[[[77,[-1,-2,-3]]],[[77,[-1,-2,-3]]],[59,60,59],[59,65,61,60,41,59],[59,66,59]],[[[78,[-1,-2,-3]]],[[78,[-1,-2,-3]]],[59,59,60],[59,59,65,61,60,41],[59,59,66]],[[[79,[-1,-2,-3]]],[[79,[-1,-2,-3]]],[59,60,59],[59,65,61,60,41,59],[59,66,59]],[[[80,[-1,-2,-3]]],[[80,[-1,-2,-3]]],59,59,59],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[10,10],21],[[26,26],21],[[[58,[-1,-2,-3]],[58,[-1,-2,-3]]],21,81,81,81],[[37,37],21],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],0,0,0,0,[[],[[78,[-1,-2,-3]]],[59,60],[59,65,61,60,41],[59,66]],0,0,0,[[10,10],24],[[26,26],24],[[63,63],24],[[[58,[-1,-2,-3]],[58,[-1,-2,-3]]],24,65,65,65],[[37,37],24],[[[64,[-1,-2,-3]],[64,[-1,-2,-3]]],24,[59,60,65],[59,65,61,60,41,65],[59,66,65]],[[[67,[-1,-2,-3]],[67,[-1,-2,-3]]],24,65,65,65],[[69,69],24],[[[70,[-1,-2,-3]],[70,[-1,-2,-3]]],24,65,65,65],[[[71,[-1,-2,-3]],[71,[-1,-2,-3]]],24,[59,60,65],[59,65,61,60,41,65],[59,66,65]],[[72,72],24],[[73,73],24],[[[74,[-1,-2,-3]],[74,[-1,-2,-3]]],24,65,65,65],[[[75,[-1,-2]],[75,[-1,-2]]],24,[59,60,65],[59,65,61,60,41,65]],[[76,76],24],[[[77,[-1,-2,-3]],[77,[-1,-2,-3]]],24,[59,60,65],[59,65,61,60,41,65],[59,66,65]],[[[78,[-1,-2,-3]],[78,[-1,-2,-3]]],24,[65,59,60],[65,59,65,61,60,41],[65,59,66]],[[[79,[-1,-2,-3]],[79,[-1,-2,-3]]],24,[59,60,65],[59,65,61,60,41,65],[59,66,65]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[10,29],[[4,[3,82]]]],[[10,29],[[4,[3,82]]]],[[26,29],30],[[26,29],30],[[63,29],30],[[63,29],30],[[[58,[-1,-2,-3]],29],30,83,83,83],[[[58,[-1,-2,-3]],29],30,60,60,[]],[[37,29],30],[[37,29],30],[[[64,[-1,-2,3]],29],30,[59,60,84],[59,65,61,60,41,84]],[[[64,[-1,-2,-3]],29],30,[59,60,83],[59,65,61,60,41,83],[59,66,83]],[[[67,[-1,-2,-3]],29],30,60,60,[]],[[[67,[-1,-2,-3]],29],30,83,83,83],[[[68,[-1,-2]],29],30,[59,60,83],[59,65,61,60,41,83]],[[[68,[-1,-2]],29],30,[59,60,84],[59,65,61,60,41,84]],[[69,29],30],[[69,29],30],[[[70,[-1,-2,-3]],29],30,83,83,83],[[[71,[-1,-2,-3]],29],30,[59,60,83],[59,65,61,60,41,83],[59,66,83]],[[72,29],30],[[73,29],30],[[[74,[-1,-2,-3]],29],30,83,83,83],[[[74,[-1,-2,-3]],29],30,60,60,[]],[[[75,[-1,-2]],29],30,[59,60,83],[59,65,61,60,41,83]],[[[75,[-1,-2]],29],30,[59,60],[59,65,61,60,41]],[[76,29],30],[[[77,[-1,-2,-3]],29],30,[59,60,84],[59,65,61,60,41,84],[59,66]],[[[77,[-1,-2,-3]],29],30,[59,60,83],[59,65,61,60,41,83],[59,66,83]],[[[78,[-1,-2,-3]],29],30,[83,59,60],[83,59,65,61,60,41],[83,59,66]],[[[79,[-1,-2,-3]],29],30,[59,60,84],[59,65,61,60,41,84],[59,66]],[[[79,[-1,-2,-3]],29],30,[59,60,83],[59,65,61,60,41,83],[59,66,83]],[[[80,[-1,-2,-3]],29],30,83,83,83],[[[80,[-1,-2,-3]],29],30,60,60,[]],[[[58,[-1,-2,-3]],-4],-5,[59,60],[41,59,60,61],59,85,[]],[38,10],[26,10],[86,10],[28,10],[28,10],[-1,-1,[]],[-1,-1,[]],[34,26],[10,26],[[[33,[32]]],26],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[27,37],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[38,[[4,[10]]]],[[-1,-2],40,[41,42],43],[[-1,-2],40,[41,42],43],[[-1,-2],40,[41,42],43],[[-1,-2],40,[41,42],43],[[-1,-2],40,[41,42],43],[[-1,-2],40,[41,42],43],[[-1,-2],40,[41,42],43],[[-1,-2],40,[41,42],43],[[-1,-2],40,[41,42],43],[[-1,-2],40,[41,42],43],[[-1,-2],40,[41,42],43],[[-1,-2],40,[41,42],43],[[-1,-2],40,[41,42],43],[[-1,-2],40,[41,42],43],[[-1,-2],40,[41,42],43],[[-1,-2],40,[41,42],43],[[-1,-2],40,[41,42],43],[[-1,-2],40,[41,42],43],[[[58,[-1,-2,-3]]],[[15,[-2]]],[59,60],[41,59,60,61],59],[[10,-1],3,50],[[26,-1],3,50],[[63,-1],3,50],[[[58,[-1,-2,-3]],-4],3,41,41,41,50],[[37,-1],3,50],[[[64,[-1,-2,-3]],-4],3,[59,60,41],[59,65,61,60,41,41],[59,66,41],50],[[[67,[-1,-2,-3]],-4],3,41,41,41,50],[[69,-1],3,50],[[[70,[-1,-2,-3]],-4],3,41,41,41,50],[[[71,[-1,-2,-3]],-4],3,[59,60,41],[59,65,61,60,41,41],[59,66,41],50],[[72,-1],3,50],[[73,-1],3,50],[[[74,[-1,-2,-3]],-4],3,41,41,41,50],[[[75,[-1,-2]],-3],3,[59,60,41],[59,65,61,60,41,41],50],[[76,-1],3,50],[[[77,[-1,-2,-3]],-4],3,[59,60,41],[59,65,61,60,41,41],[59,66,41],50],[[[78,[-1,-2,-3]],-4],3,[41,59,60],[41,59,65,61,60,41],[41,59,66],50],[[[79,[-1,-2,-3]],-4],3,[59,60,41],[59,65,61,60,41,41],[59,66,41],50],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[58,[-1,-2,-3]]],24,[59,60],[41,59,60,61],59],0,[-1,22,[[7,[26]]]],[-1,[[58,[10,10,3]]],[[7,[26]]]],[13,10],[[[77,[-1,-2,-3]],-4],[[77,[-1,-2,-3]]],[59,60],[59,61,60,41],[59,66],85],[[[77,[-1,-2,-3]],-4],[[77,[-1,-2,-3]]],[59,60],[59,61,60,41],[59,66],85],0,0,0,0,0,0,0,0,[-1,10,[[87,[38]]]],[[[12,[10]],10],73],[[-1,-2],[[75,[-1,-2]]],[59,60],[59,65,61,60,41]],[[[12,[[77,[-1,-2,3]]]]],[[78,[-1,-2,3]]],[59,60],[59,65,61,60,41]],0,[[[58,[0,63,3]],1],2],0,[[10,10],[[15,[21]]]],[[26,26],[[15,[21]]]],[[[58,[-1,-2,-3]],[58,[-1,-2,-3]]],[[15,[21]]],88,88,88],[[37,37],[[15,[21]]]],[[10,[12,[10]]],89],[[10,[12,[10]]],[[71,[10,10,3]]]],0,0,0,[[[67,[-1,-2,-3]]],[[67,[-1,-2,-3]]],[],[],[]],0,0,[[[77,[-1,-2,3]]],[[78,[-1,-2,3]]],[59,60],[59,65,61,60,41]],0,0,[10,[[15,[13]]]],[[[58,[-1,-2,-3]],-4,-5],[[58,[-6,-7,-3]]],[59,60],[41,59,60,61],59,85,85,[],[]],[[[77,[-1,-2,-3]],-4],[[77,[-1,-2,-3]]],[59,60],[59,61,60,41],[59,66],85],[[[58,[-1,-2,-3]],-4],[[58,[-1,-5,-3]]],[59,60],[41,59,60,61],59,85,[]],0,[[[64,[-1,-2,3]]],[[68,[-1,-2]]],[59,60],[59,65,61,60,41]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,90,[]],[10,90],[63,90],[[[58,[-1,-2,-3]]],90,60,60,[]],[[[67,[-1,-2,-3]]],90,60,60,[]],[[[68,[-1,-2]]],90,[59,60,84],[59,65,61,60,41,84]],[69,90],[[[70,[-1,-2,-3]]],90,60,60,[]],[[[71,[-1,-2,-3]]],90,[59,60,84],[59,65,61,60,41,84],[59,66]],[72,90],[73,90],[[[74,[-1,-2,-3]]],90,60,60,[]],[[[77,[-1,-2,-3]]],90,[59,60,84],[59,65,61,60,41,84],[59,66]],[[[79,[-1,-2,-3]],10,10],90,[59,60,84],[59,65,61,60,41,84],[59,66]],[[[80,[-1,-2,-3]],10,24,24],90,60,60,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],0,0,0,0,0,[[[58,[-1,-2,-3]]],[[0,[91]]],[59,60],[41,59,60,61],59],[[[58,[-1,-2,-3]],-4],[[58,[-1,-2,-3]]],[59,60],[41,59,60,61],59,85],[[[64,[-1,-2,3]],-3],[[64,[-1,-2,3]]],[59,60],[59,65,61,60,41],85],[[[70,[-1,-2,-3]],-4],[[70,[-1,-2,-3]]],[59,60],[59,65,61,60,41],[59,66],85],[[[71,[-1,-2,-3]],-4],[[71,[-1,-2,-3]]],[59,60],[59,65,61,60,41],[59,66],85],[[[77,[-1,-2,-3]],-4],[[77,[-1,-2,-3]]],[59,60],[59,61,60,41],[59,66],85],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[58,[-1,-2,-3]],-4,-5],3,[59,60],[41,59,60,61],59,85,85],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[92,92],[[-1,-2],3,[],[]],[[92,10,10],[[12,[93]]]],[[],92],[[92,89],[[12,[93]]]],[-1,-1,[]],[92,10],[-1,-2,[],[]],[[92,10],[[15,[10]]]],[[92,10],10],[[92,38],[[4,[[12,[52]],25]]]],[-1,-2,[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,57,[]],[-1,-2,[],[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],94],[[],95],[[],96],[[],97],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],94],[[],95],[[],96],[[],97],[[94,38],[[4,[98,[36,[27,99,28]]]]]],[[95,38],[[4,[22,[36,[27,99,28]]]]]],[[96,38],[[4,[100,[36,[27,99,28]]]]]],[[97,38],[[4,[[12,[52]],[36,[27,99,28]]]]]],[-1,[[4,[[3,[27,99,27]],[36,[27,99,28]]]]],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[101,[[0,[10]],2]],[0,[10,10]],1],[[4,[3,0]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[102,102],[[-1,-2],3,[],[]],0,[[],[[101,[[0,[10]],2]]]],[[102,29],30],[[[103,[-1,-2]],29],30,83,83],[[[101,[-1,-2]],29],30,83,83],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,[14,[[0,[10]]]]],[[12,[[103,[[0,[10]],2]]]]],[]],[[104,[14,[[0,[10]]]]],[[12,[[103,[[0,[10]],2]]]]]],[[105,[14,[[0,[10]]]]],[[12,[[103,[[0,[10]],2]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[104,[[49,[48]]]],[105,[[49,[48]]]],[[10,[12,[2]]],104],[10,105],0,[-1,-2,[],[]],0,[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[105,2],105],[[105,27],105],[[105,2],105],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[107,[14,[13]],[15,[5]]],[[15,[13]]]],[[[44,[-1]]],[[44,[108]]],[]],[[[44,[109]]],[[44,[108]]]],[[[44,[110]]],[[44,[108]]]],[[[44,[111]]],[[44,[108]]]],[[[44,[112]]],[[44,[108]]]],[[[44,[113]]],[[44,[108]]]],[[[44,[114]]],[[44,[108]]]],[[[44,[115]]],[[44,[108]]]],[[[44,[116]]],[[44,[108]]]],[[[44,[117]]],[[44,[108]]]],[[[44,[118]]],[[44,[108]]]],[[[44,[119]]],[[44,[108]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,[116,2],[117,2],[116,10],[117,10],0,0,0,0,0,[[109,29],30],[[110,29],30],[[111,29],30],[[112,29],30],[[113,29],30],[[114,29],30],[[115,29],30],[[116,29],30],[[117,29],30],[[118,29],30],[[119,29],30],[[-1,13,[49,[85]]],3,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[107,[[49,[48]]]],[[-1,13],[[12,[[3,[2,13]]]]],[]],[[115,13],[[12,[[3,[2,13]]]]]],[[116,13],[[12,[[3,[2,13]]]]]],[[117,13],[[12,[[3,[2,13]]]]]],[[118,13],[[12,[[3,[2,13]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,24,[]],[115,24],[116,24],[117,24],[118,24],[-1,24,[]],[115,24],[116,24],[117,24],[118,24],[-1,24,[]],[119,24],[13,-1,[]],[[-1,5,13],[[3,[27,22]]],[]],[[109,5,13],[[3,[27,22]]]],[[110,5,13],[[3,[27,22]]]],[[111,5,13],[[3,[27,22]]]],[[112,5,13],[[3,[27,22]]]],[[113,5,13],[[3,[27,22]]]],[[114,5,13],[[3,[27,22]]]],[[115,5,13],[[3,[27,22]]]],[[116,5,13],[[3,[27,22]]]],[[117,5,13],[[3,[27,22]]]],[[118,5,13],[[3,[27,22]]]],[[119,5,13],[[3,[27,22]]]],[[1,10,[14,[22]]],[[4,[2,0]]]],[[1,10,[14,[22]]],[[4,[2,0]]]],[[1,10,[14,[22]]],[[4,[2,0]]]],[[1,10,[14,[22]]],[[4,[2,0]]]],[-1,10,[]],[107,10],[109,10],[110,10],[111,10],[112,10],[113,10],[114,10],[115,10],[116,10],[117,10],[118,10],[119,10],0,0,[10,109],[10,110],[10,111],[10,112],[10,113],[10,114],[[],[[12,[10]]]],[[],[[12,[10]]]],[[],[[12,[10]]]],[[],[[12,[10]]]],[[[44,[-1]],1],3,[]],[[[44,[109]],1],3],[[[44,[110]],1],3],[[[44,[111]],1],3],[[[44,[112]],1],3],[[[44,[113]],1],3],[[[44,[114]],1],3],[[[44,[115]],1],3],[[[44,[116]],1],3],[[[44,[117]],1],3],[[[44,[118]],1],3],[[-1,13],10,[]],[[118,13],10],[-1,[[15,[13]]],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0],"c":[],"p":[[3,"TypeInfo",0],[6,"ArcSort",0],[15,"tuple"],[4,"Result",1458],[3,"EGraph",0],[3,"Primitive",0],[8,"Into",1459],[8,"Sort",1228],[3,"TermDag",0],[3,"Symbol",355],[4,"Term",0],[3,"Vec",1460],[3,"Value",0],[15,"slice"],[4,"Option",1461],[3,"SimplePrimitive",0],[3,"Function",0],[3,"RunReport",0],[4,"ExtractReport",0],[4,"RunMode",0],[4,"Ordering",1462],[6,"Expr",355],[3,"SerializeConfig",0],[15,"bool"],[4,"Error",0],[4,"Literal",355],[15,"usize"],[3,"String",1463],[3,"Formatter",1464],[6,"Result",1464],[3,"NotFoundError",0],[15,"f64"],[3,"OrderedFloat",1465],[15,"i64"],[8,"PrimitiveLike",0],[4,"ParseError",1466],[3,"Id",355],[15,"str"],[6,"TermId",0],[15,"u64"],[8,"Hash",1467],[8,"Sized",1468],[8,"BuildHasher",1467],[3,"Arc",1469],[8,"Send",1468],[8,"Sync",1468],[8,"Fn",1470],[8,"TypeConstraint",1139],[3,"Box",1471],[8,"Hasher",1467],[15,"u32"],[6,"Command",355],[15,"array"],[3,"SmallVec",1472],[3,"EGraph",1473],[8,"Error",1474],[3,"TypeId",1475],[4,"GenericExpr",355],[8,"Clone",1476],[8,"Display",1464],[8,"Eq",1462],[8,"IntoIterator",1477],[3,"ResolvedVar",355],[4,"GenericNCommand",355],[8,"PartialEq",1462],[8,"Default",1478],[4,"GenericSchedule",355],[4,"GenericCommand",355],[3,"IdentSort",355],[3,"GenericRunConfig",355],[3,"GenericFunctionDecl",355],[3,"Variant",355],[3,"Schema",355],[4,"GenericFact",355],[3,"CorrespondingVar",355],[4,"Change",355],[4,"GenericAction",355],[3,"GenericActions",355],[3,"GenericRule",355],[3,"GenericRewrite",355],[8,"Ord",1462],[3,"Error",1464],[8,"Debug",1464],[8,"ToSexp",355],[8,"FnMut",1470],[3,"NonZeroU32",1479],[8,"AsRef",1459],[8,"PartialOrd",1462],[6,"FunctionDecl",355],[4,"Sexp",1480],[8,"Iterator",1481],[3,"Desugar",1070],[6,"NCommand",355],[3,"ActionParser",1089],[3,"ExprParser",1089],[3,"FactParser",1089],[3,"ProgramParser",1089],[6,"Action",355],[3,"Token",1482],[6,"Fact",355],[3,"Problem",1139],[4,"ImpossibleConstraint",1139],[4,"Constraint",1139],[3,"SimpleTypeConstraint",1139],[3,"AllEqualTypeConstraint",1139],[4,"ConstraintError",1139],[3,"NotEqualPrimitive",1228],[8,"Any",1475],[3,"BoolSort",1228],[3,"RationalSort",1228],[3,"StringSort",1228],[3,"UnitSort",1228],[3,"I64Sort",1228],[3,"F64Sort",1228],[3,"MapSort",1228],[3,"SetSort",1228],[3,"VecSort",1228],[3,"FunctionSort",1228],[3,"EqSort",1228],[13,"Best",350],[13,"Variants",350],[6,"Schedule",355],[6,"Rule",355],[3,"Facts",355],[6,"RunConfig",355],[13,"Relation",1033],[13,"Simplify",1033],[13,"QueryExtract",1033],[13,"Output",1033],[13,"Input",1033],[13,"SetOption",1033],[13,"Datatype",1033],[13,"Declare",1033],[13,"Rule",1033],[13,"Output",1052],[13,"Input",1052],[13,"SetOption",1052],[13,"NormRule",1052],[8,"__ToTriple",1089],[13,"ArityMismatch",1225],[8,"FromSort",1228],[8,"IntoSort",1228]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
